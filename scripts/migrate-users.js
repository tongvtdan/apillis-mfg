#!/usr/bin/env node

/**
 * Migration Script: Convert users table to use user_id from Supabase auth
 * This script helps automate the migration process
 * Date: 2025-01-27
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configuration
const SUPABASE_URL = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
    console.error('❌ Missing required environment variables:');
    console.error('   VITE_SUPABASE_URL or SUPABASE_URL');
    console.error('   SUPABASE_SERVICE_ROLE_KEY');
    process.exit(1);
}

// Initialize Supabase client with service role key for admin access
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

async function main() {
    console.log('🚀 Starting users table migration...\n');

    try {
        // Step 1: Get all auth users
        console.log('📋 Step 1: Fetching Supabase auth users...');
        const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers();

        if (authError) {
            throw new Error(`Failed to fetch auth users: ${authError.message}`);
        }

        console.log(`✅ Found ${authUsers.users.length} auth users`);

        // Step 2: Get all application users
        console.log('\n📋 Step 2: Fetching application users...');
        const { data: appUsers, error: appError } = await supabase
            .from('users')
            .select('*');

        if (appError) {
            throw new Error(`Failed to fetch application users: ${appError.message}`);
        }

        console.log(`✅ Found ${appUsers.length} application users`);

        // Step 3: Create email to user_id mapping
        console.log('\n📋 Step 3: Creating email to user_id mapping...');
        const emailMapping = {};

        authUsers.users.forEach(authUser => {
            emailMapping[authUser.email] = authUser.id;
        });

        // Step 4: Check which application users have corresponding auth users
        console.log('\n📋 Step 4: Checking user mapping...');
        const mappedUsers = [];
        const unmappedUsers = [];

        appUsers.forEach(appUser => {
            if (emailMapping[appUser.email]) {
                mappedUsers.push({
                    email: appUser.email,
                    name: appUser.name,
                    authUserId: emailMapping[appUser.email],
                    appUserId: appUser.id
                });
            } else {
                unmappedUsers.push({
                    email: appUser.email,
                    name: appUser.name,
                    appUserId: appUser.id
                });
            }
        });

        console.log(`✅ ${mappedUsers.length} users have corresponding auth users`);
        if (unmappedUsers.length > 0) {
            console.log(`⚠️  ${unmappedUsers.length} users are missing auth users:`);
            unmappedUsers.forEach(user => {
                console.log(`   - ${user.email} (${user.name})`);
            });
        }

        // Step 5: Generate migration SQL
        console.log('\n📋 Step 5: Generating migration SQL...');
        const migrationSQL = generateMigrationSQL(mappedUsers);

        // Save migration SQL to file
        const fs = require('fs');
        const path = require('path');
        const outputPath = path.join(__dirname, 'generated-migration.sql');

        fs.writeFileSync(outputPath, migrationSQL);
        console.log(`✅ Migration SQL saved to: ${outputPath}`);

        // Step 6: Show next steps
        console.log('\n📋 Step 6: Next steps:');
        console.log('1. Review the generated migration SQL');
        console.log('2. Create auth users for unmapped users if needed');
        console.log('3. Run the migration in your database');
        console.log('4. Update the AuthContext to use user_id instead of email');

        // Step 7: Show unmapped users that need auth accounts
        if (unmappedUsers.length > 0) {
            console.log('\n⚠️  Users that need auth accounts created:');
            unmappedUsers.forEach(user => {
                console.log(`   - ${user.email} (${user.name})`);
            });

            console.log('\n💡 You can create auth users manually in the Supabase dashboard');
            console.log('   or use the Supabase CLI to create them programmatically.');
        }

    } catch (error) {
        console.error('❌ Migration failed:', error.message);
        process.exit(1);
    }
}

function generateMigrationSQL(mappedUsers) {
    let sql = `-- Generated Migration SQL for users table
-- Date: ${new Date().toISOString()}
-- This file was auto-generated by the migration script

-- ============================================================================
-- STEP 1: Backup current data (IMPORTANT - Run this first!)
-- ============================================================================
CREATE TABLE users_backup AS SELECT * FROM users;

-- ============================================================================
-- STEP 2: Handle foreign key references BEFORE dropping the id column
-- ============================================================================
-- Create a mapping table to store old id to new user_id mappings
CREATE TEMP TABLE id_mapping (
    old_id UUID,
    email VARCHAR(255),
    new_user_id UUID
);

-- Populate mapping table with email to user_id mappings
-- IMPORTANT: Replace these UUIDs with actual Supabase auth user IDs
INSERT INTO id_mapping (old_id, email, new_user_id) VALUES
`;

    // Add the actual mappings
    mappedUsers.forEach((user, index) => {
        const comma = index < mappedUsers.length - 1 ? ',' : ';';
        sql += `    ('${user.appUserId}', '${user.email}', '${user.authUserId}')${comma}\n`;
    });

    sql += `
-- Update direct_manager_id references to use new user_ids
UPDATE users 
SET direct_manager_id = mapping.new_user_id
FROM id_mapping mapping
WHERE users.direct_manager_id = mapping.old_id;

-- Update contacts table created_by reference
UPDATE contacts 
SET created_by = mapping.new_user_id
FROM id_mapping mapping
WHERE contacts.created_by = mapping.old_id;

-- ============================================================================
-- STEP 3: Drop the old id column and add user_id as primary key
-- ============================================================================
-- Drop the primary key constraint first
ALTER TABLE users DROP CONSTRAINT users_pkey;

-- Drop the old id column
ALTER TABLE users DROP COLUMN id;

-- Add user_id column and populate it
ALTER TABLE users ADD COLUMN id UUID;

-- Update the id column with the new user_ids
UPDATE users 
SET id = mapping.new_user_id
FROM id_mapping mapping
WHERE users.email = mapping.email;

-- Make id NOT NULL and add primary key constraint
ALTER TABLE users ALTER COLUMN id SET NOT NULL;
ALTER TABLE users ADD PRIMARY KEY (id);

-- ============================================================================
-- STEP 4: Update indexes and constraints
-- ============================================================================
DROP INDEX IF EXISTS idx_users_employee_id;
DROP INDEX IF EXISTS idx_users_direct_manager_id;

CREATE INDEX idx_users_organization_id ON users(organization_id);
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_employee_id ON users(employee_id);
CREATE INDEX idx_users_direct_manager_id ON users(direct_manager_id);
CREATE INDEX idx_users_role ON users(role);
CREATE INDEX idx_users_department ON users(department);
CREATE INDEX idx_users_status ON users(status);

-- Update foreign key constraints
ALTER TABLE users 
DROP CONSTRAINT IF EXISTS users_direct_manager_id_fkey;

ALTER TABLE users 
ADD CONSTRAINT users_direct_manager_id_fkey 
FOREIGN KEY (direct_manager_id) REFERENCES users(id) ON DELETE SET NULL;

-- Update contacts table created_by reference
ALTER TABLE contacts 
DROP CONSTRAINT IF EXISTS contacts_created_by_fkey;

ALTER TABLE contacts 
ADD CONSTRAINT contacts_created_by_fkey 
FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE SET NULL;

-- ============================================================================
-- STEP 5: Clean up and verify
-- ============================================================================
-- Drop the temporary mapping table
DROP TABLE id_mapping;

-- Add documentation comment
COMMENT ON TABLE users IS 'Users table now uses Supabase auth user_id as primary key for consistency across the application';

-- Verify the new structure
\\d users;

-- Verify data integrity
SELECT COUNT(*) as total_users FROM users;
SELECT COUNT(*) as users_with_roles FROM users WHERE role IS NOT NULL;
SELECT role, COUNT(*) FROM users GROUP BY role;

-- ============================================================================
-- ROLLBACK INSTRUCTIONS (if needed)
-- ============================================================================
-- If something goes wrong, you can restore from backup:
-- DROP TABLE users;
-- ALTER TABLE users_backup RENAME TO users;
-- ALTER TABLE users ADD PRIMARY KEY (id);
`;

    return sql;
}

// Run the migration script
if (require.main === module) {
    main().catch(console.error);
}

module.exports = { main, generateMigrationSQL };
