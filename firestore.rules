rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for role validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function hasRole(role) {
      return isAuthenticated() && getUserData().role == role;
    }
    
    function isAdmin() {
      return hasRole('Admin');
    }
    
    function isProcurement() {
      return hasRole('Procurement');
    }
    
    function isEngineer() {
      return hasRole('Engineer');
    }
    
    function isQA() {
      return hasRole('QA');
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasAnyRole(roles) {
      return isAuthenticated() && getUserData().role in roles;
    }
    
    // Users collection - role-based access
    match /users/{userId} {
      // Users can read and write their own profile
      allow read, write: if isOwner(userId);
      
      // Admins can read and write all user profiles
      allow read, write: if isAdmin();
      
      // Procurement can read user profiles for assignment purposes
      allow read: if isProcurement();
    }
    
    // RFQs collection - role-based access (placeholder for future implementation)
    match /rfqs/{rfqId} {
      // Admins have full access
      allow read, write: if isAdmin();
      
      // Procurement can create and manage RFQs
      allow read, write: if isProcurement();
      
      // Engineers can read RFQs assigned to them and update technical fields
      allow read: if isEngineer();
      allow write: if isEngineer() && 
        (resource == null || 
         request.auth.uid in resource.data.assignedEngineers ||
         request.auth.uid in get(/databases/$(database)/documents/rfqs/$(rfqId)).data.assignedEngineers);
      
      // QA can read RFQs in review stage and update QA fields
      allow read: if isQA();
      allow write: if isQA() && 
        (resource == null || 
         resource.data.status == 'Under Review' ||
         get(/databases/$(database)/documents/rfqs/$(rfqId)).data.status == 'Under Review');
    }
    
    // RFQ attachments and documents
    match /rfqs/{rfqId}/attachments/{attachmentId} {
      // Same access rules as parent RFQ
      allow read, write: if isAdmin();
      allow read, write: if isProcurement();
      allow read: if hasAnyRole(['Engineer', 'QA']);
      allow write: if isEngineer() && 
        request.auth.uid in get(/databases/$(database)/documents/rfqs/$(rfqId)).data.assignedEngineers;
    }
    
    // System configuration (Admin only)
    match /config/{configId} {
      allow read, write: if isAdmin();
    }
    
    // Audit logs (Admin read-only, system write)
    match /audit/{auditId} {
      allow read: if isAdmin();
      // Write access controlled by Cloud Functions only
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}