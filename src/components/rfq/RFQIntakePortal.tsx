import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { useToast } from '@/hooks/use-toast';
import { useFileUpload, UploadedFile } from '@/hooks/useFileUpload';
import { supabase } from '@/integrations/supabase/client';
import { RFQPriority } from '@/types/rfq';
import { 
  Upload, 
  FileText, 
  X, 
  CheckCircle, 
  Building2, 
  Mail, 
  Phone, 
  User,
  Calendar,
  DollarSign,
  AlertTriangle
} from 'lucide-react';

const rfqFormSchema = z.object({
  company_name: z.string().min(2, 'Company name must be at least 2 characters'),
  project_name: z.string().min(5, 'Project name must be at least 5 characters'),
  description: z.string().min(20, 'Description must be at least 20 characters'),
  priority: z.enum(['low', 'medium', 'high', 'urgent']),
  estimated_value: z.number().min(1, 'Estimated value must be greater than 0').optional(),
  due_date: z.string().optional(),
  contact_name: z.string().min(2, 'Contact name is required'),
  contact_email: z.string().email('Valid email is required'),
  contact_phone: z.string().optional(),
  notes: z.string().optional(),
});

type RFQFormData = z.infer<typeof rfqFormSchema>;

interface RFQIntakePortalProps {
  onSuccess?: (rfqNumber: string) => void;
}

export function RFQIntakePortal({ onSuccess }: RFQIntakePortalProps) {
  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([]);
  const [submitting, setSubmitting] = useState(false);
  const [submitted, setSubmitted] = useState(false);
  const [rfqNumber, setRfqNumber] = useState('');
  
  const { toast } = useToast();
  const { uploadFiles, deleteFile, uploading, uploadProgress } = useFileUpload();

  const form = useForm<RFQFormData>({
    resolver: zodResolver(rfqFormSchema),
    defaultValues: {
      priority: 'medium',
      estimated_value: undefined,
    },
  });

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files) return;

    const newUploadedFiles = await uploadFiles(files);
    setUploadedFiles(prev => [...prev, ...newUploadedFiles]);
  };

  const removeFile = async (fileId: string, filePath: string) => {
    const success = await deleteFile(filePath);
    if (success) {
      setUploadedFiles(prev => prev.filter(f => f.id !== fileId));
    }
  };

  const onSubmit = async (data: RFQFormData) => {
    setSubmitting(true);
    
    try {
      // Insert the RFQ
      const { data: rfqData, error: rfqError } = await supabase
        .from('rfqs')
        .insert([{
          company_name: data.company_name,
          project_name: data.project_name,
          description: data.description,
          priority: data.priority,
          estimated_value: data.estimated_value,
          due_date: data.due_date ? new Date(data.due_date).toISOString() : null,
          contact_name: data.contact_name,
          contact_email: data.contact_email,
          contact_phone: data.contact_phone,
          notes: data.notes,
          status: 'inquiry' as const,
          rfq_number: '', // Will be auto-generated by trigger
        }])
        .select('id, rfq_number')
        .single();

      if (rfqError) {
        console.error('RFQ creation error:', rfqError);
        throw new Error('Failed to create RFQ');
      }

      const newRfqId = rfqData.id;
      const newRfqNumber = rfqData.rfq_number;

      // Upload attachments if any
      if (uploadedFiles.length > 0) {
        const attachmentPromises = uploadedFiles.map(file => 
          supabase
            .from('rfq_attachments')
            .insert([{
              rfq_id: newRfqId,
              filename: file.name,
              file_size: file.size,
              file_type: file.type,
              storage_path: file.path,
            }])
        );

        await Promise.all(attachmentPromises);
      }

      // Success
      setRfqNumber(newRfqNumber);
      setSubmitted(true);
      
      toast({
        title: "RFQ Submitted Successfully!",
        description: `Your RFQ ${newRfqNumber} has been submitted and is now under review.`,
      });

      if (onSuccess) {
        onSuccess(newRfqNumber);
      }

    } catch (error) {
      console.error('Submission error:', error);
      toast({
        variant: "destructive",
        title: "Submission Failed",
        description: "There was an error submitting your RFQ. Please try again.",
      });
    } finally {
      setSubmitting(false);
    }
  };

  if (submitted) {
    return (
      <div className="max-w-2xl mx-auto p-6">
        <Card className="text-center">
          <CardHeader>
            <div className="mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4">
              <CheckCircle className="w-8 h-8 text-green-600" />
            </div>
            <CardTitle className="text-2xl text-green-700">
              RFQ Submitted Successfully!
            </CardTitle>
            <CardDescription className="text-lg">
              Your RFQ <strong>{rfqNumber}</strong> has been received
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="bg-muted p-4 rounded-lg">
              <h3 className="font-semibold mb-2">What happens next?</h3>
              <ol className="text-sm text-muted-foreground space-y-1 text-left">
                <li>1. Our procurement team will review your request within 24 hours</li>
                <li>2. We'll conduct a technical feasibility assessment</li>
                <li>3. You'll receive a detailed quotation via email</li>
                <li>4. Our team will contact you to discuss next steps</li>
              </ol>
            </div>
            <Button 
              onClick={() => window.location.reload()} 
              variant="outline"
              className="mt-4"
            >
              Submit Another RFQ
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="mb-8 text-center">
        <h1 className="text-3xl font-bold mb-2">Request for Quotation</h1>
        <p className="text-muted-foreground text-lg">
          Submit your manufacturing requirements and get a detailed quote within 24 hours
        </p>
      </div>

      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        {/* Company Information */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Building2 className="w-5 h-5" />
              Company Information
            </CardTitle>
            <CardDescription>
              Tell us about your company and project
            </CardDescription>
          </CardHeader>
          <CardContent className="grid gap-4 md:grid-cols-2">
            <div className="space-y-2">
              <Label htmlFor="company_name">Company Name *</Label>
              <Input
                id="company_name"
                {...form.register('company_name')}
                placeholder="Your company name"
              />
              {form.formState.errors.company_name && (
                <p className="text-sm text-destructive">
                  {form.formState.errors.company_name.message}
                </p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="project_name">Project Name *</Label>
              <Input
                id="project_name"
                {...form.register('project_name')}
                placeholder="e.g., Automotive Parts Manufacturing"
              />
              {form.formState.errors.project_name && (
                <p className="text-sm text-destructive">
                  {form.formState.errors.project_name.message}
                </p>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Contact Information */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <User className="w-5 h-5" />
              Contact Information
            </CardTitle>
            <CardDescription>
              How can we reach you about this RFQ?
            </CardDescription>
          </CardHeader>
          <CardContent className="grid gap-4 md:grid-cols-3">
            <div className="space-y-2">
              <Label htmlFor="contact_name">Contact Name *</Label>
              <Input
                id="contact_name"
                {...form.register('contact_name')}
                placeholder="John Doe"
              />
              {form.formState.errors.contact_name && (
                <p className="text-sm text-destructive">
                  {form.formState.errors.contact_name.message}
                </p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="contact_email">Email Address *</Label>
              <Input
                id="contact_email"
                type="email"
                {...form.register('contact_email')}
                placeholder="john@company.com"
              />
              {form.formState.errors.contact_email && (
                <p className="text-sm text-destructive">
                  {form.formState.errors.contact_email.message}
                </p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="contact_phone">Phone Number</Label>
              <Input
                id="contact_phone"
                {...form.register('contact_phone')}
                placeholder="+1 (555) 123-4567"
              />
            </div>
          </CardContent>
        </Card>

        {/* Project Details */}
        <Card>
          <CardHeader>
            <CardTitle>Project Requirements</CardTitle>
            <CardDescription>
              Provide detailed information about your manufacturing needs
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="description">Project Description *</Label>
              <Textarea
                id="description"
                {...form.register('description')}
                placeholder="Describe your manufacturing requirements, materials, quantities, quality standards, etc."
                rows={4}
              />
              {form.formState.errors.description && (
                <p className="text-sm text-destructive">
                  {form.formState.errors.description.message}
                </p>
              )}
            </div>

            <div className="grid gap-4 md:grid-cols-3">
              <div className="space-y-2">
                <Label htmlFor="priority">Priority Level</Label>
                <Select
                  value={form.watch('priority')}
                  onValueChange={(value: RFQPriority) => form.setValue('priority', value)}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="low">Low - Standard timeline</SelectItem>
                    <SelectItem value="medium">Medium - Preferred timeline</SelectItem>
                    <SelectItem value="high">High - Rush order</SelectItem>
                    <SelectItem value="urgent">Urgent - Emergency</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="estimated_value">Estimated Budget ($)</Label>
                <Input
                  id="estimated_value"
                  type="number"
                  {...form.register('estimated_value', { valueAsNumber: true })}
                  placeholder="50000"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="due_date">Required Completion Date</Label>
                <Input
                  id="due_date"
                  type="date"
                  {...form.register('due_date')}
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="notes">Additional Notes</Label>
              <Textarea
                id="notes"
                {...form.register('notes')}
                placeholder="Any special requirements, certifications needed, shipping instructions, etc."
                rows={3}
              />
            </div>
          </CardContent>
        </Card>

        {/* File Upload */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Upload className="w-5 h-5" />
              Technical Documents
            </CardTitle>
            <CardDescription>
              Upload drawings, specifications, CAD files, or reference materials
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="border-2 border-dashed border-muted-foreground/25 rounded-lg p-6">
                <div className="text-center">
                  <Upload className="mx-auto h-12 w-12 text-muted-foreground/50" />
                  <div className="mt-4">
                    <Label htmlFor="file-upload" className="cursor-pointer">
                      <span className="text-primary hover:text-primary/80">
                        Click to upload files
                      </span>
                      <span className="text-muted-foreground"> or drag and drop</span>
                    </Label>
                    <Input
                      id="file-upload"
                      type="file"
                      multiple
                      onChange={handleFileUpload}
                      className="hidden"
                      accept=".pdf,.doc,.docx,.xls,.xlsx,.png,.jpg,.jpeg,.gif,.zip,.step,.iges"
                      disabled={uploading}
                    />
                  </div>
                  <p className="text-sm text-muted-foreground mt-2">
                    Supported: PDF, DOC, XLS, Images, ZIP, CAD files (Max 50MB per file)
                  </p>
                </div>
              </div>

              {uploading && (
                <div className="space-y-2">
                  <div className="flex items-center justify-between text-sm">
                    <span>Uploading files...</span>
                    <span>{Math.round(uploadProgress)}%</span>
                  </div>
                  <Progress value={uploadProgress} className="h-2" />
                </div>
              )}

              {uploadedFiles.length > 0 && (
                <div className="space-y-2">
                  <Label>Uploaded Files:</Label>
                  <div className="space-y-2">
                    {uploadedFiles.map((file) => (
                      <div
                        key={file.id}
                        className="flex items-center justify-between p-3 bg-muted rounded-lg"
                      >
                        <div className="flex items-center gap-3">
                          <FileText className="w-4 h-4 text-muted-foreground" />
                          <div>
                            <p className="text-sm font-medium">{file.name}</p>
                            <p className="text-xs text-muted-foreground">
                              {(file.size / 1024 / 1024).toFixed(2)} MB
                            </p>
                          </div>
                        </div>
                        <Button
                          type="button"
                          variant="ghost"
                          size="sm"
                          onClick={() => removeFile(file.id, file.path)}
                          className="text-destructive hover:text-destructive"
                        >
                          <X className="w-4 h-4" />
                        </Button>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Submit */}
        <Card className="bg-primary/5 border-primary/20">
          <CardContent className="pt-6">
            <div className="flex items-start gap-3 mb-4">
              <AlertTriangle className="w-5 h-5 text-primary mt-0.5" />
              <div className="text-sm">
                <p className="font-medium">Before submitting:</p>
                <ul className="mt-1 text-muted-foreground space-y-1">
                  <li>• Ensure all required fields are completed</li>
                  <li>• Include detailed technical specifications</li>
                  <li>• Upload relevant drawings or reference materials</li>
                  <li>• Double-check your contact information</li>
                </ul>
              </div>
            </div>
            
            <Button
              type="submit"
              size="lg"
              disabled={submitting || uploading}
              className="w-full"
            >
              {submitting ? 'Submitting RFQ...' : 'Submit Request for Quotation'}
            </Button>
          </CardContent>
        </Card>
      </form>
    </div>
  );
}